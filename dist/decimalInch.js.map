{"version":3,"sources":["decimalInch.js"],"names":["inches","resolution","exactMetricOutput","document","getElementById","increaseResolution","decreaseResolution","resolutionPower","input","addEventListener","inchUpdate","event","preventDefault","target","value","parseInt","innerHTML","refreshResolution","resolutionUpdate","processResolution","val","temp","Math","pow","updateOutput","abs","wOutput","roundToThree","exactMetric","exact","stringifymm","upperMetric","mm","ceil","diff","toFixed","lowerMetric","floor","lowerFraction","upperFraction","digits","num","round","candidateArray","arr","i","push","smaller","position","j","length","fraction","simplify","decFraction","larger","str","result","data","split","numOne","Number","numTwo","max","toString"],"mappings":"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","file":"decimalInch.js","sourceRoot":"..","sourcesContent":["let inches = 0;\nlet resolution = 6;\n\nlet exactMetricOutput = document.getElementById('exactMetricOutput');\n\nlet increaseResolution = document.getElementById('increaseResolution');\nlet decreaseResolution = document.getElementById('decreaseResolution');\nlet resolutionPower = document.getElementById('resolutionSlider');\n\nlet input = document.getElementById('Inches');\n\ninput.addEventListener('input', inchUpdate);\n\nincreaseResolution.addEventListener('click', (event) => {\n  event.preventDefault();\n  let target = document.getElementById('resolution');\n  target.value = parseInt(target.value) + 1;\n  document.getElementById('test').innerHTML = target.value;\n  refreshResolution(parseInt(target.value));\n});\n\nresolutionPower.addEventListener('input', resolutionUpdate);\n\nfunction resolutionUpdate() {\n  processResolution(this.value);\n}\n\nfunction processResolution(val) {\n  let temp = parseInt(val);\n  if (temp < 1) {\n    temp = 1;\n  } else if (temp > 6) {\n    temp = 6;\n  }\n  resolution = temp;\n  document.getElementById('test').innerHTML = `Fraction Resolution: 1/${Math.pow(2, resolution)}\"`;\n  updateOutput();\n}\n\nfunction inchUpdate() {\n  inches = Math.abs(this.value);\n  wOutput.innerHTML = `${roundToThree(inches)}\"`;\n  updateOutput();\n}\n\nfunction exactMetric() {\n  let exact = inches * 25.4;\n  exactMetricOutput.innerHTML = stringifymm(exact);\n}\n\nfunction upperMetric() {\n  mm = Math.ceil(inches * 25.4);\n  diff = Math.abs((inches - (mm  / 25.4)).toFixed(3));\n  document.getElementById('metric_over').innerHTML = `${stringifymm(mm, 0)} - ${Math.abs(diff).toFixed(3)}\"`;\n}\n\nfunction lowerMetric() {\n  let mm = Math.floor(inches * 25.4);\n  let diff = (inches - (mm / 25.4)).toFixed(3);\n  document.getElementById('metric_under').innerHTML = `${stringifymm(mm, 0)} + ${diff}\"`;\n}\n\nfunction updateOutput() {\n  lowerMetric();\n  exactMetric();\n  upperMetric();\n  lowerFraction();\n  upperFraction();\n}\n\nfunction stringifymm(val, digits = 2) {\n  if (val > 1000) {\n    return `${(val / 1000).toFixed(2)}m`;\n  } else if (val > 100) {\n    return `${(val / 10).toFixed(1)}cm`;\n  } else {\n    return `${(val).toFixed(digits)}mm`;\n  }\n}\n\nfunction roundToThree(num) {    \n  return +(Math.round(num + \"e+3\")  + \"e-3\");\n} // Adapted from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round\n\nfunction candidateArray() {\n  let arr = [0];\n  for (let i = 0; i < Math.pow(2, resolution) ; i++) {\n    arr.push(arr[i] + Math.pow(2, -1 * resolution));\n  }\n  return arr;\n}\n\nfunction lowerFraction() {\n  let arr = candidateArray();\n  let diff = inches % 1.0;\n  let smaller = 0;\n  let position = 0;\n\n  for (let j = 0; j < arr.length; j++) {\n    if (diff >= arr[j]) {\n      smaller = arr[j];\n      position = j;\n    }\n  }\n\n  let fraction = simplify(`${position} / ${Math.pow(2, resolution)}`);\n  let decFraction = position / Math.pow(2, resolution);\n\n  document.getElementById('smallerFraction').innerHTML = \n    `Smaller: ${fraction}\" + ${(diff - decFraction).toFixed(3)}\"`;\n}\n\nfunction upperFraction() {\n  let arr = candidateArray();\n  let diff = inches % 1.0;\n  let larger = arr[arr.length - 1];\n  let position = arr.length;\n\n  for (let j = arr.length; j >= 0; j--) {\n    if (diff <= arr[j]) {\n      larger = arr[j];\n      position = j;\n    }\n  }\n  let fraction = simplify(`${position} / ${Math.pow(2, resolution)}`);\n  let decFraction = position / Math.pow(2, resolution);\n  document.getElementById('largerFraction').innerHTML =  \n    `Larger: ${fraction}\" - ${(decFraction - diff).toFixed(3)}\"`;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n// https://www.geeksforgeeks.org/reduce-a-fraction-to-its-simplest-form-by-using-javascript/\nfunction simplify(str) { \n  var result = '', data = str.split('/'),  \n  numOne = Number(data[0]),  \n  numTwo = Number(data[1]); \n  for (var i = Math.max(numOne, numTwo); i > 1; i--) { \n    if ((numOne % i == 0) && (numTwo % i == 0)) { \n      numOne /= i; \n      numTwo /= i;\n    }\n  } \n  if (numTwo === 1) { \n    result = numOne.toString() \n  } else { \n  result = numOne.toString() + '/' + numTwo.toString() \n  } \n  return result \n}\n"]}