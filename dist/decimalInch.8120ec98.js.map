{"version":3,"sources":["decimalInch.js"],"names":["inches","resolution","exactMetricOutput","document","getElementById","increaseResolution","decreaseResolution","resolutionPower","input","resolutionUpdate","console","log","value","processResolution","val","temp","parseInt","innerHTML","Math","pow","updateOutput","inchUpdate","abs","wOutput","roundToThree","exactMetric","exact","stringifymm","upperMetric","mm","ceil","diff","toFixed","lowerMetric","floor","lowerFraction","upperFraction","digits","candidateArray","arr","i","push","position","j","length","fraction","simplify","decFraction","string","trunc","toString","str","result","data","split","numOne","Number","numTwo","max","num","round","addEventListener","event","preventDefault","target"],"mappings":"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","file":"decimalInch.8120ec98.js","sourceRoot":"..","sourcesContent":["let inches = 0;\nlet resolution = 6;\n\nlet exactMetricOutput = document.getElementById('exactMetricOutput');\n\nlet increaseResolution = document.getElementById('increaseResolution');\nlet decreaseResolution = document.getElementById('decreaseResolution');\nlet resolutionPower = document.getElementById('resolutionSlider');\n\nlet input = document.getElementById('Inches');\ninput.addEventListener('input', inchUpdate);\n\nincreaseResolution.addEventListener('click', (event) => {\n  event.preventDefault();\n  let target = document.getElementById('resolutionSlider');\n  target.value = parseInt(target.value) + 1;\n  processResolution(target.value);\n});\n\ndecreaseResolution.addEventListener('click', (event) => {\n  event.preventDefault();\n  let target = document.getElementById('resolutionSlider');\n  target.value = parseInt(target.value) - 1;\n  processResolution(target.value);\n});\n\nresolutionPower.addEventListener('input', resolutionUpdate);\n\nfunction resolutionUpdate() {\n  console.log(`resolutionUpdate(): ${this.value}`);\n  processResolution(this.value);\n}\n\nfunction processResolution(val) {\n  let temp = parseInt(val);\n  if (temp < 1) {\n    temp = 1;\n  } else if (temp > 6) {\n    temp = 6;\n  }\n  console.log('temp: ' + temp);\n  resolution = temp;\n  document.getElementById('test').innerHTML = `Fraction Resolution: 1/${Math.pow(2, resolution)}\"`;\n  updateOutput();\n}\n\nfunction inchUpdate() {\n  inches = Math.abs(this.value);\n  wOutput.innerHTML = `${roundToThree(inches)}\"`;\n  updateOutput();\n}\n\nfunction exactMetric() {\n  let exact = inches * 25.4;\n  exactMetricOutput.innerHTML = stringifymm(exact);\n}\n\nfunction upperMetric() {\n  mm = Math.ceil(inches * 25.4);\n  diff = Math.abs((inches - (mm  / 25.4)).toFixed(3));\n  document.getElementById('metric_over').innerHTML = `${stringifymm(mm, 0)} - ${Math.abs(diff).toFixed(3)}\"`;\n}\n\nfunction lowerMetric() {\n  let mm = Math.floor(inches * 25.4);\n  let diff = (inches - (mm / 25.4)).toFixed(3);\n  document.getElementById('metric_under').innerHTML = `${stringifymm(mm, 0)} + ${diff}\"`;\n}\n\nfunction updateOutput() {\n  lowerMetric();\n  exactMetric();\n  upperMetric();\n  lowerFraction();\n  upperFraction();\n}\n\nfunction stringifymm(val, digits = 2) {\n  if (val > 1000) {\n    return `${(val / 1000).toFixed(2)}m`;\n  } else if (val > 100) {\n    return `${(val / 10).toFixed(1)}cm`;\n  } else {\n    return `${(val).toFixed(digits)}mm`;\n  }\n}\n\nfunction candidateArray() {\n  let arr = [0];\n  for (let i = 0; i < Math.pow(2, resolution) ; i++) {\n    arr.push(arr[i] + Math.pow(2, -1 * resolution));\n  }\n  return arr;\n}\n\nfunction lowerFraction() {\n  let arr = candidateArray();\n  let diff = inches % 1.0;\n  let smaller = 0;\n  let position = 0;\n\n  for (let j = 0; j < arr.length; j++) {\n    if (diff >= arr[j]) {\n      smaller = arr[j];\n      position = j;\n    }\n  }\n\n  let fraction = simplify(`${position} / ${Math.pow(2, resolution)}`);\n  let decFraction = position / Math.pow(2, resolution);\n\n  let string = 'Smaller: ';\n  string += (inches > 1.0) ? `${(Math.trunc(inches).toString() )}-` : '';\n  string += `${fraction}\" + ${(diff - decFraction).toFixed(3)}\"`;\n\n  document.getElementById('smallerFraction').innerHTML = string;\n}\n\nfunction upperFraction() {\n  let arr = candidateArray();\n  let diff = inches % 1.0;\n  let larger = arr[arr.length - 1];\n  let position = arr.length;\n\n  for (let j = arr.length; j >= 0; j--) {\n    if (diff <= arr[j]) {\n      larger = arr[j];\n      position = j;\n    }\n  }\n  let fraction = simplify(`${position} / ${Math.pow(2, resolution)}`);\n  let decFraction = position / Math.pow(2, resolution);\n  document.getElementById('largerFraction').innerHTML =  \n    `Larger: ${fraction}\" - ${(decFraction - diff).toFixed(3)}\"`;\n\n  let string = 'Larger: ';\n  string += (inches > 1.0) ? `${(Math.trunc(inches).toString() )}-` : '';\n  string += `${fraction}\" - ${(decFraction - diff).toFixed(3)}\"`;\n\n  document.getElementById('largerFraction').innerHTML = string;\n}\n\n// https://www.geeksforgeeks.org/reduce-a-fraction-to-its-simplest-form-by-using-javascript/\nfunction simplify(str) { \n  var result = '', data = str.split('/'),  \n  numOne = Number(data[0]),  \n  numTwo = Number(data[1]); \n  for (var i = Math.max(numOne, numTwo); i > 1; i--) { \n    if ((numOne % i == 0) && (numTwo % i == 0)) { \n      numOne /= i; \n      numTwo /= i;\n    }\n  } \n  if (numTwo === 1) { \n    result = numOne.toString() \n  } else { \n  result = numOne.toString() + '/' + numTwo.toString() \n  } \n  return result \n}\n\nfunction roundToThree(num) {    \n  return +(Math.round(num + \"e+3\")  + \"e-3\");\n} // Adapted from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round\n"]}